server:
  port: 8090
spring:
  kafka:
    #指定kafka server的地址，集群配多个，中间，逗号隔开
    bootstrap-servers: 
    #listener:
    # ack-mode:
    #  RECORD: 每处理一条commit一次
    #  BATCH(默认):每次poll的时候批量提交一次，频率取决于每次poll的调用频率
    #  TIME :每次间隔ackTime的时间去commit
    #  COUNT :累积达到ackCount次的ack去commit
    #  COUNT_TIME:ackTime或ackCount哪个条件先满足，就commit
    #  MANUAL:listener负责ack，但是背后也是批量上去
    #  MANUAL_IMMEDIATE:listner负责ack，每调用一次，就立即commit
    #ack-mode: manual
    #生产端配置
    producer:
      #客户端id 用于服务器日志记录
      #client-id: 100
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      #  0：broker 一接收到还没有写入磁盘就已经返回，当 broker 故障时有可能丢失数据；
      #  1： producer 等待 broker 的 ack， partition 的 leader 落盘成功后返回 ack，如果在 follower同步成功之前 leader 故障，那么将会丢失数据；
      #  -1（all） ： producer 等待 broker 的 ack， partition 的 leader 和 follower 全部落盘成功后才
      #  返回 ack。但是如果在 follower 同步完成后， broker 发送 ack 之前， leader 发生故障，那么会
      #   造成数据重复。
      acks: -1  #消息不丢失最大努力保证
      #只有数据积累到 batch.size字节之后， sender 才会发送数据
      #batch-size:
      # 失败后重试试次数
      retries: 4
      #每批次发送消息的数量
      batch-size: 500
      #producer可以用来缓存数据的内存大小。如果数据产生速度大于向broker发送的速度，producer会阻塞或者抛出异常，以“block.on.buffer.full”来表明。这项设置将和producer能够使用的总内存相关，但并不是一个硬性的限制，因为不是producer使用的所有内存都是用于缓存。一些额外的内存会用于压缩（如果引入压缩机制），同样还有一些用于维护请求。
      buffer-memory: 33554432

    #消费端配置
    consumer:
      #消费端客户端id 用于服务器日志记录
      #client-id: 101
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      group-id: user-group # 群组ID
      #消息是否自动提交，true 代表自动提交，false 代表关闭自动提交
      enable-auto-commit: false
      #自动提交的间隔时间，当前仅当在enable-auto-commit: true 的情况下生效
      #auto-commit-interval: 1000ms
      #auto-offset-reset: 生效条件换了消费者组的时候 或者 offset 已经被删掉了的失败
      #该参数有两个参数可选：earliest和latest 而默认值是lastest.
      # earliest 从最早开始消费.lastest 从最大提交的offset开始消费
      auto-offset-reset: earliest
      # 一次请求服务器等等的最大时长fetch-max-wait 与fetch-min-size二者满足一个即可返回.
      #拉取满足的最小数量 （500 毫秒）
      fetch-max-wait: 500
      #一次拉取返回的最大数量
      fetch-min-size: 10
      max-poll-records: 1000
    listener:
      poll-timeout:
    properties:
      # max.poll.interval.ms(默认值是5分钟)，处理业务逻辑时间，这个参数需要根据实际业务处理时间进行设置
      max:
        poll:
          interval:
            ms: 300000
      #一次拉取消息得最大字节数默认50M,更改32M(es限制)
      fetch:
        max:
          bytes: 33554432
      # 检查组内成员发生崩溃的时间（默认10秒）
      session:
        timeout:
          ms: 10000

